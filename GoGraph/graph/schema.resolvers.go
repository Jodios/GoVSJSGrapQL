package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"sync"

	"github.com/jodios/gograph/db"
	"github.com/jodios/gograph/graph/model"
)

type PokemonResponse struct {
	Pokemon *model.Pokemon
	Error   error
}

// Pokemon is the resolver for the Pokemon field.
func (r *queryResolver) Pokemon(ctx context.Context, iDs []int) ([]*model.Pokemon, error) {
	pokeChan := make(chan PokemonResponse)
	wg := &sync.WaitGroup{}
	for _, id := range iDs {
		wg.Add(1)
		go func(id int, pokeChan chan PokemonResponse, wg *sync.WaitGroup, ctx context.Context) {
			defer wg.Done()
			pokemon, err := db.GetPokemon(id, ctx)
			pokeChan <- PokemonResponse{
				Pokemon: pokemon,
				Error:   err,
			}
		}(id, pokeChan, wg, ctx)
	}
	go func() {
		wg.Wait()
		close(pokeChan)
	}()
	response := make([]*model.Pokemon, 0)
	for pokeResponse := range pokeChan {
		if pokeResponse.Error != nil {
			return nil, pokeResponse.Error
		}
		response = append(response, pokeResponse.Pokemon)
	}
	return response, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
